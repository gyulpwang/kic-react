{"ast":null,"code":"var _jsxFileName = \"C:\\\\Dev\\\\git\\\\kic-react\\\\myapp-telephone\\\\src\\\\components\\\\ContactDetail.js\";\nimport React from 'react';\nexport default class ContactDetail extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEdit: false,\n      // 편집유무 체크\n      name: '',\n      phone: ''\n    };\n    this.handleToggle = this.handleToggle.bind(this);\n    this.handleChange = this.handleChange.bind(this); // 자식입장 -> 수정\n\n    this.handleEdit = this.handleEdit.bind(this);\n  } // 토글 기능\n\n\n  handleToggle() {\n    // 글 상세보기로 넘어온 name, phone\n    if (!this.state.isEdit) {\n      this.setState({\n        name: this.props.contact.name,\n        phone: this.props.contact.phone\n      });\n    } else {\n      // 데이터 수정하고 나서 OK버튼을 누른 경우 -> Edit\n      this.handleEdit(); // this.props.onedit(this.state.name~)\n    }\n\n    this.setState({\n      isEdit: !this.state.isEdit\n    });\n    console.log(!this.state.isEdit); // 현재 바뀐 값이 출력\n    // Javascript의 alert처럼 console이 setState보다 우선순위가 높아서 부정한 값을 세팅해주는 것\n  } // 수정되게 하기 위해서\n\n\n  handleChange(e) {\n    let nextState = {}; // 빈 객체\n    // 형식) 객체명.속성명 = 객체[속성명]\n\n    nextState[e.target.name] = e.target.value; // ex) nextState[name] = '홍길동'\n\n    this.setState(nextState);\n  } // 부모함수를 호출\n\n\n  handleEdit() {\n    this.props.onEdit(this.state.name, this.state.phone);\n  }\n\n  render() {\n    // 화면디자인에 따라서 영역을 구분할 수 있도록 변수 선언(selectedKey)\n    // 클릭한 항목을 전달(this.props를 이용)\n    const details = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, this.props.contact.name), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, this.props.contact.phone)); // 단순히 보여주는용\n\n    const edit = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"name\",\n      placeholder: \"\\uC774\\uB984\\uC785\\uB825\",\n      value: this.state.name,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"phone\",\n      placeholder: \"\\uC804\\uBC88\\uC785\\uB825\",\n      value: this.state.phone,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }))); // 수정하는용\n    // 버튼만 토글 기능 부여\n\n    const view = this.state.isEdit ? edit : details; // 중요1\n\n    const blank = React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Not Selected!\");\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Details\"), this.props.isSelected ? view : blank, \"  \", React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: this.handleToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, this.state.isEdit ? 'OK' : 'Edit', \" \"), React.createElement(\"button\", {\n      onClick: this.props.onRemove,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Remove\")));\n  }\n\n} // 처음에는 선택할 수가 없기에 초기값을 설정\n\nContactDetail.defaultProps = {\n  contact: {\n    name: '',\n    phone: ''\n  }\n};","map":{"version":3,"sources":["C:/Dev/git/kic-react/myapp-telephone/src/components/ContactDetail.js"],"names":["React","ContactDetail","Component","constructor","props","state","isEdit","name","phone","handleToggle","bind","handleChange","handleEdit","setState","contact","console","log","e","nextState","target","value","onEdit","render","details","edit","view","blank","isSelected","onRemove","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\n\nexport default class ContactDetail extends React.Component{\n    constructor(props){\n        super(props)\n        this.state={\n            isEdit:false,   // 편집유무 체크\n            name: '',\n            phone: ''\n        }\n\n        this.handleToggle = this.handleToggle.bind(this)\n        this.handleChange = this.handleChange.bind(this)    // 자식입장 -> 수정\n        this.handleEdit = this.handleEdit.bind(this)\n    }\n\n    // 토글 기능\n    handleToggle(){\n        // 글 상세보기로 넘어온 name, phone\n        if(!this.state.isEdit){\n            this.setState({\n                name:this.props.contact.name,\n                phone:this.props.contact.phone\n            })\n        }else{    // 데이터 수정하고 나서 OK버튼을 누른 경우 -> Edit\n            this.handleEdit()   // this.props.onedit(this.state.name~)\n        }\n\n        this.setState({\n            isEdit: !this.state.isEdit\n        })\n\n        console.log(!this.state.isEdit)    // 현재 바뀐 값이 출력\n                                           // Javascript의 alert처럼 console이 setState보다 우선순위가 높아서 부정한 값을 세팅해주는 것\n    }\n\n    // 수정되게 하기 위해서\n    handleChange(e){\n        let nextState = {}  // 빈 객체\n        // 형식) 객체명.속성명 = 객체[속성명]\n        nextState[e.target.name] = e.target.value   // ex) nextState[name] = '홍길동'\n\n        this.setState(nextState)\n    }\n\n    // 부모함수를 호출\n    handleEdit(){\n        this.props.onEdit(this.state.name, this.state.phone)\n    }\n\n    render(){\n        // 화면디자인에 따라서 영역을 구분할 수 있도록 변수 선언(selectedKey)\n        // 클릭한 항목을 전달(this.props를 이용)\n        const details = (<div>\n                            <p>{this.props.contact.name}</p>\n                            <p>{this.props.contact.phone}</p>\n                        </div>) // 단순히 보여주는용\n        const edit = (<div>\n                        <p>\n                            <input type=\"text\"\n                                name=\"name\"\n                                placeholder=\"이름입력\"\n                                value={this.state.name}\n                                onChange={this.handleChange}\n                            />\n                            <input type=\"text\"\n                                name=\"phone\"\n                                placeholder=\"전번입력\"\n                                value={this.state.phone}\n                                onChange={this.handleChange}\n                            />\n                        </p>\n                      </div>)   // 수정하는용\n        \n        // 버튼만 토글 기능 부여\n        const view = this.state.isEdit ? edit : details;    // 중요1\n\n        const blank = (<div>Not Selected!</div>)\n\n        return(\n            <div>\n                <h2>Details</h2>\n                {this.props.isSelected ? view : blank}  {/* 중요2) details -> view */}\n                <p>\n                    <button onClick={this.handleToggle}>\n                        {this.state.isEdit ? 'OK' : 'Edit'} {/* 중요3 */}\n                    </button>\n                    <button onClick={this.props.onRemove}>Remove</button>\n                </p>\n            </div>\n        )\n    }\n}\n\n// 처음에는 선택할 수가 없기에 초기값을 설정\nContactDetail.defaultProps = {\n    contact: {\n        name: '',\n        phone: '' \n    }\n}"]},"metadata":{},"sourceType":"module"}