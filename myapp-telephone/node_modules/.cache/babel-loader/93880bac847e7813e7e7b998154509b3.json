{"ast":null,"code":"var _jsxFileName = \"C:\\\\Dev\\\\git\\\\kic-react\\\\myapp-telephone\\\\src\\\\components\\\\Contact.js\";\nimport React from 'react';\nimport ContactInfo from './ContactInfo';\nimport ContactDetail from './ContactDetail';\nimport ContactCreate from './ContactCreate'; // 배열의 추가, 수정, 삭제 -> update 함수를 이용\n\nimport update from 'react-addons-update';\n\nclass Contact extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // {}객체 []배열\n      keyword: '',\n      // 검색어를 기억할 속성\n      selectedKey: -1,\n      // 항목의 인덱스 번호 구분\n      contactData: [{\n        name: '김유리',\n        phone: '02-123-456'\n      }, {\n        name: '이수지',\n        phone: '02-234-567'\n      }, {\n        name: '박태정',\n        phone: '02-345-678'\n      }, {\n        name: '정슬기',\n        phone: '02-567-234'\n      }, {\n        name: '최규식',\n        phone: '02-456-901'\n      }]\n    };\n    this.handleChange = this.handleChange.bind(this); // 수동\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleCreate = this.handleCreate.bind(this); // 추가\n\n    this.handleRemove = this.handleRemove.bind(this); // 삭제\n\n    this.handleEdit = this.handleEdit.bind(this); // 수정\n  } // -------------------------------------------------------------------------------- //\n\n\n  handleCreate(contact) {\n    // 배열의 키명, 매개변수만 변경 가능\n    this.setState({\n      // 1. 데이터 넣어줄 대상자, 2. $push를 이용([]로 묶어줌)\n      contactData: update(this.state.contactData, {\n        $push: [contact]\n      }) // contactData 배열에 매개변수로 받은 contact 데이터를 넣어주겠다\n\n    });\n  }\n\n  handleRemove() {\n    // 선택하지 않았다면 삭제 X\n    if (this.state.selectedKey < 0) {\n      return; // 탈출문 -> 문장을 안 쓰면 else로 묶어줘야 된다.\n    }\n\n    this.setState({\n      // 1. 데이터 삭제할 대상자, 2. $splice를 이용([]로 묶어줌)\n      // 문법) $spcie[1.삭제할 대상항목의 인덱스 번호, 2. 삭제할 갯수]\n      // ex) {$splice:[[0, 1]]}   // 배열의 0번째 삭제\n      // ex) {$splice:[[0, 2]]}   // 배열의 0, 1번째 삭제(2개)\n      contactData: update(this.state.contactData, {\n        $splice: [[this.state.selectedKey, 1]]\n      }),\n      selectedKey: -1 // 추가로 삭제한 후 다음 번 삭제할 때\n\n    });\n  }\n\n  handleEdit(name, phone) {\n    this.setState({\n      // 1. 데이터 수정할 대상자, 2. $set을 이용([]로 묶어줌)\n      contactData: update(this.state.contactData, {\n        // 1. 수정할 항목의 인덱스 번호\n        [this.state.selectedKey]: {\n          // 2. 배열의 키명:{$set:수정할 값}\n          name: {\n            $set: name\n          },\n          phone: {\n            $set: phone\n          } // , addr:{$set:addr},,\n\n        }\n      })\n    });\n  } // -------------------------------------------------------------------------------- //\n  // 검색어 입력 -> keyword 저장\n\n\n  handleChange(e) {\n    // event 객체\n    this.setState({\n      // jQuery의 $(this)와 같은 기능 = event.target(이벤트발생객체)\n      keyword: e.target.value\n    });\n  }\n\n  handleClick(key) {\n    this.setState({\n      selectedKey: key\n    });\n    console.log(key, 'is selected!');\n  } // -------------------------------------------------------------------------------- //\n  // 크롬 > Application > Local Storage(DB)를 만드는 과정\n  // cf. Local Storage에 저장되는 데이터는 모두 문자열임.\n  // DB에 저장된 데이터 가져와서 화면에 출력\n\n\n  componentWillMount() {\n    // const 변수명 = localStorage.불러올키명\n    const contactData = localStorage.contactData;\n\n    if (contactData) {\n      this.setState({\n        contactData: JSON.parse(contactData) // 문자열 -> 배열 객체 변환\n\n      });\n    }\n\n    console.log('componentWillMount() 호출됨!');\n  } // 화면에 수정(추가, 수정, 삭제할 때) 호출\n\n\n  componentDidUpdate(prevProps, prevState) {\n    // 여기선 저장 목적이기 때문에 prevState가 중요\n    // DB상의 데이터와 화면상의 데이터가 다르면\n    // JSON.stringify(객체) : 객체 -> 문자열로 변환\n    // JSON.parse(문자열) : 문자열 -> 객체로 변환\n    if (JSON.stringify(prevState.contactData) !== JSON.stringify(this.state.contactData)) {\n      // 형식) localStorage.동적키명 = 저장할 값(문자열로 변환)\n      localStorage.contactData = JSON.stringify(this.state.contactData);\n    }\n\n    console.log('componentDidUpdate() 호출됨!');\n  } // -------------------------------------------------------------------------------- //\n\n\n  render() {\n    // 화살표함수를 이용해서 배열의 요소 분리 -> 인덱스별로 출력\n    const mapToComponents = data => {\n      // data(배열 전체)[{}]\n      // ------------------------------------------------------------ //\n      //data = data.sort()    // 데이터 정렬\n      // 각 배열의 요소를 하나씩 읽어들여서 검색어와 비교\n      data = data.filter(contact => {\n        // 못 찾으면 -1을 리턴\n        return contact.name.indexOf(this.state.keyword) > -1;\n      }); // ------------------------------------------------------------ //\n\n      return data.map((contact, i) => {\n        // (배열의 항목, 인덱스 번호)\n        // 같은 태그 구분 인덱스 번호(key) 내부적인 구분자\n        //console.log(contact, ' -> ', i)\n        return React.createElement(ContactInfo, {\n          contact: contact,\n          key: i,\n          onClick: () => {\n            this.handleClick(i);\n          } // ContactInfo.js에서는 key를 받아오기가 쉽지 않아 여기서 매개변수 없는 익명함수를 통해 i 값을 넘김으로써 처리한다.\n          ,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        });\n      });\n    };\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      name: \"keyword\",\n      placeholder: \"search\",\n      value: this.state.keyword,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, mapToComponents(this.state.contactData), React.createElement(ContactDetail, {\n      isSelected: this.state.selectedKey !== -1,\n      contact: this.state.contactData[this.state.selectedKey],\n      onRemove: this.handleRemove,\n      onEdit: this.handleEdit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }), React.createElement(ContactCreate, {\n      onCreate: this.handleCreate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Contact;","map":{"version":3,"sources":["C:/Dev/git/kic-react/myapp-telephone/src/components/Contact.js"],"names":["React","ContactInfo","ContactDetail","ContactCreate","update","Contact","Component","constructor","props","state","keyword","selectedKey","contactData","name","phone","handleChange","bind","handleClick","handleCreate","handleRemove","handleEdit","contact","setState","$push","$splice","$set","e","target","value","key","console","log","componentWillMount","localStorage","JSON","parse","componentDidUpdate","prevProps","prevState","stringify","render","mapToComponents","data","filter","indexOf","map","i"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ContactInfo from './ContactInfo';\r\nimport ContactDetail from './ContactDetail';\r\nimport ContactCreate from './ContactCreate';\r\n// 배열의 추가, 수정, 삭제 -> update 함수를 이용\r\nimport update from 'react-addons-update';\r\n\r\nclass Contact extends React.Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {  // {}객체 []배열\r\n            keyword: '',    // 검색어를 기억할 속성\r\n            selectedKey: -1,    // 항목의 인덱스 번호 구분\r\n            contactData:[\r\n                {name: '김유리', phone: '02-123-456'}, \r\n                {name: '이수지', phone: '02-234-567'}, \r\n                {name: '박태정', phone: '02-345-678'}, \r\n                {name: '정슬기', phone: '02-567-234'},\r\n                {name: '최규식', phone: '02-456-901'}\r\n            ]\r\n        }\r\n\r\n        this.handleChange = this.handleChange.bind(this);   // 수동\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleCreate = this.handleCreate.bind(this);   // 추가\r\n        this.handleRemove = this.handleRemove.bind(this);   // 삭제\r\n        this.handleEdit = this.handleEdit.bind(this);       // 수정\r\n    }\r\n\r\n    // -------------------------------------------------------------------------------- //\r\n    handleCreate(contact){  // 배열의 키명, 매개변수만 변경 가능\r\n        this.setState({ // 1. 데이터 넣어줄 대상자, 2. $push를 이용([]로 묶어줌)\r\n            contactData:update(this.state.contactData, {$push:[contact]})   // contactData 배열에 매개변수로 받은 contact 데이터를 넣어주겠다\r\n        })\r\n    }\r\n\r\n    handleRemove(){                 \r\n        // 선택하지 않았다면 삭제 X\r\n        if(this.state.selectedKey < 0){\r\n            return; // 탈출문 -> 문장을 안 쓰면 else로 묶어줘야 된다.\r\n        }\r\n        \r\n        this.setState({ // 1. 데이터 삭제할 대상자, 2. $splice를 이용([]로 묶어줌)\r\n                        // 문법) $spcie[1.삭제할 대상항목의 인덱스 번호, 2. 삭제할 갯수]\r\n                        // ex) {$splice:[[0, 1]]}   // 배열의 0번째 삭제\r\n                        // ex) {$splice:[[0, 2]]}   // 배열의 0, 1번째 삭제(2개)\r\n            contactData:update(this.state.contactData, {$splice:[[this.state.selectedKey, 1]]}),\r\n            selectedKey: -1  // 추가로 삭제한 후 다음 번 삭제할 때\r\n        })\r\n    }\r\n\r\n    handleEdit(name, phone){\r\n        this.setState({ // 1. 데이터 수정할 대상자, 2. $set을 이용([]로 묶어줌)\r\n            contactData:update(this.state.contactData,\r\n                {   // 1. 수정할 항목의 인덱스 번호\r\n                    [this.state.selectedKey]:{\r\n                        // 2. 배열의 키명:{$set:수정할 값}\r\n                        name:{$set:name},\r\n                        phone:{$set:phone}  // , addr:{$set:addr},,\r\n                    }\r\n                })\r\n        })\r\n    }\r\n    // -------------------------------------------------------------------------------- //\r\n\r\n    // 검색어 입력 -> keyword 저장\r\n    handleChange(e){    // event 객체\r\n        this.setState({ // jQuery의 $(this)와 같은 기능 = event.target(이벤트발생객체)\r\n            keyword: e.target.value\r\n        })\r\n    }\r\n\r\n    handleClick(key){\r\n        this.setState({\r\n            selectedKey: key\r\n        })\r\n        console.log(key, 'is selected!')\r\n    }\r\n\r\n// -------------------------------------------------------------------------------- //\r\n    // 크롬 > Application > Local Storage(DB)를 만드는 과정\r\n    // cf. Local Storage에 저장되는 데이터는 모두 문자열임.\r\n    // DB에 저장된 데이터 가져와서 화면에 출력\r\n    componentWillMount(){\r\n        // const 변수명 = localStorage.불러올키명\r\n        const contactData = localStorage.contactData\r\n        if(contactData){\r\n            this.setState({\r\n                contactData: JSON.parse(contactData)    // 문자열 -> 배열 객체 변환\r\n            })\r\n        }\r\n\r\n        console.log('componentWillMount() 호출됨!')\r\n    }\r\n\r\n    // 화면에 수정(추가, 수정, 삭제할 때) 호출\r\n    componentDidUpdate(prevProps, prevState){\r\n        // 여기선 저장 목적이기 때문에 prevState가 중요\r\n        // DB상의 데이터와 화면상의 데이터가 다르면\r\n        // JSON.stringify(객체) : 객체 -> 문자열로 변환\r\n        // JSON.parse(문자열) : 문자열 -> 객체로 변환\r\n        if(JSON.stringify(prevState.contactData) !== JSON.stringify(this.state.contactData)){\r\n            // 형식) localStorage.동적키명 = 저장할 값(문자열로 변환)\r\n            localStorage.contactData = JSON.stringify(this.state.contactData)\r\n        }\r\n\r\n        console.log('componentDidUpdate() 호출됨!')\r\n    }\r\n// -------------------------------------------------------------------------------- //\r\n\r\n    render(){\r\n        // 화살표함수를 이용해서 배열의 요소 분리 -> 인덱스별로 출력\r\n        const mapToComponents = (data) => { // data(배열 전체)[{}]\r\n            // ------------------------------------------------------------ //\r\n            //data = data.sort()    // 데이터 정렬\r\n            // 각 배열의 요소를 하나씩 읽어들여서 검색어와 비교\r\n            data = data.filter((contact) => {\r\n                // 못 찾으면 -1을 리턴\r\n                return contact.name.indexOf(this.state.keyword) > -1\r\n            })\r\n            // ------------------------------------------------------------ //\r\n           return(\r\n               data.map((contact, i) => {   // (배열의 항목, 인덱스 번호)\r\n                    // 같은 태그 구분 인덱스 번호(key) 내부적인 구분자\r\n                    //console.log(contact, ' -> ', i)\r\n                    return (<ContactInfo \r\n                                contact={contact}\r\n                                key={i} \r\n                                onClick={()=>{this.handleClick(i)}} // ContactInfo.js에서는 key를 받아오기가 쉽지 않아 여기서 매개변수 없는 익명함수를 통해 i 값을 넘김으로써 처리한다.\r\n                            />)\r\n               })\r\n           ) \r\n        }\r\n\r\n        return(\r\n            <div>\r\n                <input name=\"keyword\"\r\n                       placeholder=\"search\"\r\n                       value={this.state.keyword}\r\n                       onChange={this.handleChange}\r\n                />\r\n                <div>\r\n                    {mapToComponents(this.state.contactData)}\r\n                    <ContactDetail isSelected={this.state.selectedKey !== -1}\r\n                                   contact={this.state.contactData[this.state.selectedKey]}\r\n                                   onRemove={this.handleRemove}\r\n                                   onEdit={this.handleEdit}\r\n                    />\r\n                    <ContactCreate onCreate={this.handleCreate} />\r\n                    {/* (1) ContactInfo\r\n                    <div>테스트 02-123-456</div>\r\n                    <div>스트테 02-234-567</div>\r\n                    <div>트테스 02-345-678</div>\r\n                    <div>스테트 02-456-901</div>\r\n                    <div>트스테 02-567-234</div> */}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Contact;"]},"metadata":{},"sourceType":"module"}