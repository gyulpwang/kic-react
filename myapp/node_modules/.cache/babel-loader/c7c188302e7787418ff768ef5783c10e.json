{"ast":null,"code":"var _jsxFileName = \"C:\\\\Dev\\\\git\\\\kic-react\\\\myapp\\\\src\\\\index.js\";\n// 1. 화면에 모든 컴포넌트를 불러와서 결합\n// 필수 -----------------------------------------------------\nimport React from 'react'; // 컴포넌트 정보\n\nimport ReactDOM from 'react-dom'; // 화면에 출력(Virtual Machine)\n// ----------------------------------------------------------\n//import './index.css';\n// 2. 컴포넌트\n\nimport App from './components/App'; // App.js(화면에 결합 -> js)\n// ./는 src의 상대경로를 의미하므로 변경한 경로(/components)를 적어줘야함.\n\nimport App2 from './components/App2'; //import * as serviceWorker from './serviceWorker';\n// 3. ReactDOM -> index.html <div id=\"root\"></div>\n// ㄴ App을 index.html의 어디에 붙여줄 것인가\n// 첫번째 인수 : 화면에 출력할 컴포넌트명(반드시 뒤에 /줘야 인식함!)\n// 두번째 인수 : 결합해서 보여줄 위치(id를 통해) -> index.html 파일의 컴포넌트를 붙일 요소\n// ReactDOM(부모) > id=\"root\" => <App 매개변수명=\"~\"/>\n// <자식 매개변수명=\"~\" 매개변수2=~ />\n\n/*\nbefore : prop를 정상적으로 전달한 경우\nReactDOM.render(<App headerTitle=\"전달연습1\"\n                />, document.getElementById('root'));\nReactDOM.render(<App2 contentTitle=\"전달연습2\" \n                      contentBody=\"부모에서 자식에게 전달함\"\n                />, document.getElementById('root2'));\n*/\n// after : props를 전달하지 않은 경우\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 32\n  },\n  __self: this\n}), document.getElementById('root'));\nReactDOM.render(React.createElement(App2, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 33\n  },\n  __self: this\n}), document.getElementById('root2')); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();","map":{"version":3,"sources":["C:/Dev/git/kic-react/myapp/src/index.js"],"names":["React","ReactDOM","App","App2","render","document","getElementById"],"mappings":";AAAA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAA4B;;AAC5B,OAAOC,QAAP,MAAqB,WAArB,C,CAAoC;AACpC;AACA;AAEA;;AACA,OAAOC,GAAP,MAAgB,kBAAhB,C,CAAuC;AACA;;AACvC,OAAOC,IAAP,MAAiB,mBAAjB,C,CAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AAEA;;;;;;;;AAQA;;AACAF,QAAQ,CAACG,MAAT,CAAgB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAAyBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAzB;AACAL,QAAQ,CAACG,MAAT,CAAgB,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAA0BC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAA1B,E,CAGA;AACA;AACA;AACA","sourcesContent":["// 1. 화면에 모든 컴포넌트를 불러와서 결합\n// 필수 -----------------------------------------------------\nimport React from 'react';  // 컴포넌트 정보\nimport ReactDOM from 'react-dom';   // 화면에 출력(Virtual Machine)\n// ----------------------------------------------------------\n//import './index.css';\n\n// 2. 컴포넌트\nimport App from './components/App';    // App.js(화면에 결합 -> js)\n                                       // ./는 src의 상대경로를 의미하므로 변경한 경로(/components)를 적어줘야함.\nimport App2 from './components/App2';\n\n//import * as serviceWorker from './serviceWorker';\n\n// 3. ReactDOM -> index.html <div id=\"root\"></div>\n// ㄴ App을 index.html의 어디에 붙여줄 것인가\n// 첫번째 인수 : 화면에 출력할 컴포넌트명(반드시 뒤에 /줘야 인식함!)\n// 두번째 인수 : 결합해서 보여줄 위치(id를 통해) -> index.html 파일의 컴포넌트를 붙일 요소\n\n// ReactDOM(부모) > id=\"root\" => <App 매개변수명=\"~\"/>\n// <자식 매개변수명=\"~\" 매개변수2=~ />\n\n/*\nbefore : prop를 정상적으로 전달한 경우\nReactDOM.render(<App headerTitle=\"전달연습1\"\n                />, document.getElementById('root'));\nReactDOM.render(<App2 contentTitle=\"전달연습2\" \n                      contentBody=\"부모에서 자식에게 전달함\"\n                />, document.getElementById('root2'));\n*/\n// after : props를 전달하지 않은 경우\nReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<App2 />, document.getElementById('root2'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}