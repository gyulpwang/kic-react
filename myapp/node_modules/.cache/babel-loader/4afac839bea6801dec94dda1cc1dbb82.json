{"ast":null,"code":"var _jsxFileName = \"C:\\\\Dev\\\\git\\\\kic-react\\\\myapp\\\\src\\\\components\\\\App.js\";\n// es5(require)) -> es6(import) -> typescript(클래스 타입 지원)\n// 형식) import 클래스 from '경로포함파일명'\n//import React, {Component} from 'react'; // react.js(1)\nimport React from 'react'; // react.js(2)\n// 추가\n\nimport '../App.css'; // 화면에 출력할 컴포넌트 작성\n// export default class App extends React.Component{ // 1)\n//class App extends Component { // react.js(1)\n\nclass App extends React.Component {\n  // react.js(2)\n  // 화면에 출력(필수)\n  // render() 바깥 : 이벤트 처리 함수\n  sayHello() {\n    // function 등의 예약어 생략 가능\n    alert(\"이벤트 연습\");\n  }\n\n  render() {\n    // react의 라이프사이클 중 맨 마지막. 출력해야하니까 필수\n    // render() 안 : 변수선언, 스타일시트 적용\n    let text = \"리액트 연습\";\n    let pStyle = {\n      color: 'aqua',\n      backgroundColor: 'black'\n    }; // JSX(JavaScript Expression) 문법\n    // 1. JSX 무조건 하나의 태그로만 리턴해야 한다. 따라서 여러 줄의 소스를 출력하려면 트리구조로 감싸서 하나의 태그로 출력 가능하도록\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      class: \"App-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, \"App.js\"), React.createElement(\"h1\", {\n      class: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, \"\\uB9AC\\uC561\\uD2B8 \\uAD6C\\uC870\\uC5F0\\uC2B5\"), React.createElement(\"h1\", {\n      className: \"App2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, \"\\uB450\\uBC88\\uC9F8 \\uBB38\\uC7A5\\uAD6C\\uC870, \", text), React.createElement(\"p\", {\n      style: pStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, 1 == 1 ? 'True' : 'False'), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"\\uC804\\uB2EC\\uBC1B\\uC740 \\uB9E4\\uAC1C\\uBCC0\\uC218\\uBA85 : \", this.props.headerTitle), React.createElement(\"button\", {\n      onClick: this.sayHello,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, \"click me\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }));\n  }\n\n}\n/*\n못받았을 때의 기본 설정값을 지정 (항상 클래스 아래에 선언한다)\n형식) 자식클래스.defaultProps={ 매개변수명 : '디폴트값', ~}\n*/\n\n\nApp.defaultProps = {\n  headerTitle: \"전달받지 못해서 대신 기본값 출력\"\n};\nexport default App; // export default 외부로 내보낼 클래스명; // 2)","map":{"version":3,"sources":["C:/Dev/git/kic-react/myapp/src/components/App.js"],"names":["React","App","Component","sayHello","alert","render","text","pStyle","color","backgroundColor","props","headerTitle","defaultProps"],"mappings":";AAAA;AAEA;AACA;AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAA4B;AAC5B;;AACA,OAAO,YAAP,C,CAEA;AACA;AACA;;AACA,MAAMC,GAAN,SAAkBD,KAAK,CAACE,SAAxB,CAAiC;AAAG;AAClC;AACA;AACAC,EAAAA,QAAQ,GAAE;AAAE;AACVC,IAAAA,KAAK,CAAC,QAAD,CAAL;AACD;;AAEDC,EAAAA,MAAM,GAAE;AAAE;AACR;AACA,QAAIC,IAAI,GAAG,QAAX;AACA,QAAIC,MAAM,GAAG;AACXC,MAAAA,KAAK,EAAG,MADG;AAEXC,MAAAA,eAAe,EAAG;AAFP,KAAb,CAHM,CAQN;AACA;;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,KAAK,EAAC,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE;AAAI,MAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qDAFF,EAGE;AAAI,MAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wDAAgCH,IAAhC,CAHF,EAIE;AAAG,MAAA,KAAK,EAAEC,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmB,KAAK,CAAL,GAAS,MAAT,GAAkB,OAArC,CAJF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qEAAkB,KAAKG,KAAL,CAAWC,WAA7B,CAVF,EAWE;AAAQ,MAAA,OAAO,EAAE,KAAKR,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAXF,EAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,CADF;AAgBD;;AAjC8B;AAoCjC;;;;;;AAIAF,GAAG,CAACW,YAAJ,GAAmB;AACjBD,EAAAA,WAAW,EAAG;AADG,CAAnB;AAIA,eAAeV,GAAf,C,CAAoB","sourcesContent":["// es5(require)) -> es6(import) -> typescript(클래스 타입 지원)\n\n// 형식) import 클래스 from '경로포함파일명'\n//import React, {Component} from 'react'; // react.js(1)\nimport React from 'react';  // react.js(2)\n// 추가\nimport '../App.css';\n\n// 화면에 출력할 컴포넌트 작성\n// export default class App extends React.Component{ // 1)\n//class App extends Component { // react.js(1)\nclass App extends React.Component{  // react.js(2)\n  // 화면에 출력(필수)\n  // render() 바깥 : 이벤트 처리 함수\n  sayHello(){ // function 등의 예약어 생략 가능\n    alert(\"이벤트 연습\")\n  }\n\n  render(){ // react의 라이프사이클 중 맨 마지막. 출력해야하니까 필수\n    // render() 안 : 변수선언, 스타일시트 적용\n    let text = \"리액트 연습\";\n    let pStyle = {\n      color : 'aqua',\n      backgroundColor : 'black'\n    };\n\n    // JSX(JavaScript Expression) 문법\n    // 1. JSX 무조건 하나의 태그로만 리턴해야 한다. 따라서 여러 줄의 소스를 출력하려면 트리구조로 감싸서 하나의 태그로 출력 가능하도록\n    return (\n      <div>\n        <h1 class=\"App-title\">App.js</h1>\n        <h1 class=\"App\">리액트 구조연습</h1>\n        <h1 className=\"App2\">두번째 문장구조, {text}</h1>\n        <p style={pStyle}>{1 == 1 ? 'True' : 'False'}</p>\n        {/*\n          삼항연산자 : {조건식} ? 참 : 거짓;\n          1. on 이벤트 종류의 첫 글자는 항상 대문자\n          2. this.함수명 -> () (X)\n        */}\n        <h1>전달받은 매개변수명 : {this.props.headerTitle}</h1>\n        <button onClick={this.sayHello}>click me</button>\n        <br/>\n      </div>\n    );\n  }\n}\n\n/*\n못받았을 때의 기본 설정값을 지정 (항상 클래스 아래에 선언한다)\n형식) 자식클래스.defaultProps={ 매개변수명 : '디폴트값', ~}\n*/\nApp.defaultProps = {\n  headerTitle : \"전달받지 못해서 대신 기본값 출력\"\n}\n\nexport default App; // export default 외부로 내보낼 클래스명; // 2)\n"]},"metadata":{},"sourceType":"module"}