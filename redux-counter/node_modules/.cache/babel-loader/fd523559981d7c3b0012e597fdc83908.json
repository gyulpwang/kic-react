{"ast":null,"code":"import _defineProperty from \"C:\\\\Dev\\\\git\\\\kic-react\\\\redux-counter\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\r\n전달해주는 액션객체, 타입, state를 받아서 처리해주는 리듀서 함수 작성\r\n*/\nimport * as types from '../actions/ActionTypes'; // 초기상태\n\nconst initialState = {\n  color: 'black',\n  // 적용색깔\n  number: 0 // 증가 또는 감소 숫자\n\n}; // 리듀서함수 => 순수함수 형태로 작성해야 한다.(화살표 함수 형식 안됨!!)\n\nfunction counter(state = initialState, action) {\n  switch (action.type) {\n    // 증가\n    case types.INCREMENT:\n      return _objectSpread({}, state, {\n        /* 동적 배열(기존 배열 내용을 변경 -> 새로운 배열) */\n        number: state.number + 1\n      });\n    // 감소\n\n    case types.DECREMENT:\n      return _objectSpread({}, state, {\n        /* 동적 배열(기존 배열 내용을 변경 -> 새로운 배열) */\n        number: state.number - 1\n      });\n    // 색깔\n\n    case types.SET_COLOR:\n      return _objectSpread({}, state, {\n        /* 동적 배열(기존 배열 내용을 변경 -> 새로운 배열) */\n        color: action.color\n      });\n    // default\n\n    default:\n      return state;\n    // 기존의 값을 그대로 store에 덮어쓴다,\n  }\n}\n\nexport default counter;","map":{"version":3,"sources":["C:/Dev/git/kic-react/redux-counter/src/reducers/index.js"],"names":["types","initialState","color","number","counter","state","action","type","INCREMENT","DECREMENT","SET_COLOR"],"mappings":";;;;;;AAAA;;;AAGA,OAAO,KAAKA,KAAZ,MAAuB,wBAAvB,C,CAEA;;AACA,MAAMC,YAAY,GAAC;AACfC,EAAAA,KAAK,EAAE,OADQ;AACC;AAChBC,EAAAA,MAAM,EAAE,CAFO,CAEC;;AAFD,CAAnB,C,CAKA;;AACA,SAASC,OAAT,CAAiBC,KAAK,GAACJ,YAAvB,EAAqCK,MAArC,EAA4C;AACxC,UAAOA,MAAM,CAACC,IAAd;AACI;AACA,SAAKP,KAAK,CAACQ,SAAX;AACI,+BACOH,KADP;AACgB;AACZF,QAAAA,MAAM,EAACE,KAAK,CAACF,MAAN,GAAe;AAF1B;AAIJ;;AACA,SAAKH,KAAK,CAACS,SAAX;AACI,+BACOJ,KADP;AACgB;AACZF,QAAAA,MAAM,EAACE,KAAK,CAACF,MAAN,GAAe;AAF1B;AAIJ;;AACA,SAAKH,KAAK,CAACU,SAAX;AACA,+BACWL,KADX;AACoB;AACZH,QAAAA,KAAK,EAACI,MAAM,CAACJ;AAFrB;AAIA;;AACA;AACI,aAAOG,KAAP;AAAgB;AArBxB;AAuBH;;AAED,eAAeD,OAAf","sourcesContent":["/*\r\n전달해주는 액션객체, 타입, state를 받아서 처리해주는 리듀서 함수 작성\r\n*/\r\nimport * as types from '../actions/ActionTypes'\r\n\r\n// 초기상태\r\nconst initialState={\r\n    color: 'black', // 적용색깔\r\n    number: 0       // 증가 또는 감소 숫자\r\n}\r\n\r\n// 리듀서함수 => 순수함수 형태로 작성해야 한다.(화살표 함수 형식 안됨!!)\r\nfunction counter(state=initialState, action){\r\n    switch(action.type){\r\n        // 증가\r\n        case types.INCREMENT:\r\n            return {\r\n                ...state,   /* 동적 배열(기존 배열 내용을 변경 -> 새로운 배열) */\r\n                number:state.number + 1\r\n            };\r\n        // 감소\r\n        case types.DECREMENT:\r\n            return {\r\n                ...state,   /* 동적 배열(기존 배열 내용을 변경 -> 새로운 배열) */\r\n                number:state.number - 1\r\n            };\r\n        // 색깔\r\n        case types.SET_COLOR:\r\n        return {\r\n                ...state,   /* 동적 배열(기존 배열 내용을 변경 -> 새로운 배열) */\r\n                color:action.color\r\n            };\r\n        // default\r\n        default:\r\n            return state;   // 기존의 값을 그대로 store에 덮어쓴다,\r\n    }\r\n}\r\n\r\nexport default counter;"]},"metadata":{},"sourceType":"module"}