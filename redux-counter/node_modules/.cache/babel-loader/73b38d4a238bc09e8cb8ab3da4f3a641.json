{"ast":null,"code":"/*\r\nsrc/containers/CounterContainer 컴포넌트(내부적으로 저장)\r\n// 스토어 - 매개체 - 컴포넌트(구독)\r\n*/\nimport Counter from '../components/Counter';\nimport * as actions from '../actions'; // 액션타입\n\nimport { connect } from 'react-redux'; // 스토어와 연결시킬 컴포넌트 지정\n// 13가지의 색깔\n\nexport function getRandomColor() {\n  const colors = ['#495057', '#f03e3e', '#d6336c', '#ae3ec9', '#7048e8', '#4263eb', '#1c7cd6', '#1098ad', '#0ca678', '#37b24d', '#74b816', '#f59f00', '#f76707'];\n  const random = Math.floor(Math.random() * 13);\n  return colors[random]; // 선택된 인덱스 번호\n} // store 안에 state 값을 props로 연결해서 모든 컴포넌트가 구독할 수 있도록 연결 -> connect 함수\n// connect(1.state -> props로 전달함수명, 2. 액션을 리듀서에 연결시킬 함수명)(최종적으로 연결시킬 컴포넌트명)\n\nconst mapStateToProps = state => ({\n  color: state.color,\n  // 새로 변경시킬 색깔\n  number: state.number // 변경시킬 숫자(증가 or 감소)\n\n});\n\nconst mapDispatchToProps = dispatch => ({\n  // 전달받은 액션의 종류에 따라서 호출할 함수를 연결(dispatch)\n  onIncrement: () => dispatch(actions.increment()),\n  onDecrement: () => dispatch(actions.decrement()),\n  onSetColor: () => {\n    const color = getRandomColor(); // 선택된 색깔\n\n    dispatch(actions.setColor(color));\n  }\n});\n\nconst CounterContainer = connect(mapStateToProps, mapDispatchToProps)(Counter);\nexport default CounterContainer;","map":{"version":3,"sources":["C:/Dev/git/kic-react/redux-counter/src/containers/CounterContainer.js"],"names":["Counter","actions","connect","getRandomColor","colors","random","Math","floor","mapStateToProps","state","color","number","mapDispatchToProps","dispatch","onIncrement","increment","onDecrement","decrement","onSetColor","setColor","CounterContainer"],"mappings":"AAAA;;;;AAIA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAO,KAAKC,OAAZ,MAAyB,YAAzB,C,CAA0C;;AAC1C,SAAQC,OAAR,QAAsB,aAAtB,C,CAAwC;AAExC;;AACA,OAAO,SAASC,cAAT,GAAyB;AAC5B,QAAMC,MAAM,GAAG,CACX,SADW,EACD,SADC,EACS,SADT,EACmB,SADnB,EAC8B,SAD9B,EAEX,SAFW,EAED,SAFC,EAES,SAFT,EAEoB,SAFpB,EAE8B,SAF9B,EAGX,SAHW,EAGD,SAHC,EAGS,SAHT,CAAf;AAKA,QAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,KAAgB,EAA3B,CAAf;AAEA,SAAOD,MAAM,CAACC,MAAD,CAAb,CAR4B,CAQF;AAC7B,C,CAED;AACA;;AACA,MAAMG,eAAe,GAAIC,KAAD,KAAY;AAChCC,EAAAA,KAAK,EAAED,KAAK,CAACC,KADmB;AACR;AACxBC,EAAAA,MAAM,EAAEF,KAAK,CAACE,MAFkB,CAER;;AAFQ,CAAZ,CAAxB;;AAIA,MAAMC,kBAAkB,GAAIC,QAAD,KAAe;AACtC;AACAC,EAAAA,WAAW,EAAE,MAAMD,QAAQ,CAACZ,OAAO,CAACc,SAAR,EAAD,CAFW;AAGtCC,EAAAA,WAAW,EAAE,MAAMH,QAAQ,CAACZ,OAAO,CAACgB,SAAR,EAAD,CAHW;AAItCC,EAAAA,UAAU,EAAG,MAAM;AACf,UAAMR,KAAK,GAAGP,cAAc,EAA5B,CADe,CACiB;;AAChCU,IAAAA,QAAQ,CAACZ,OAAO,CAACkB,QAAR,CAAiBT,KAAjB,CAAD,CAAR;AACH;AAPqC,CAAf,CAA3B;;AASA,MAAMU,gBAAgB,GAAGlB,OAAO,CAACM,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CZ,OAA7C,CAAzB;AAEA,eAAeoB,gBAAf","sourcesContent":["/*\r\nsrc/containers/CounterContainer 컴포넌트(내부적으로 저장)\r\n// 스토어 - 매개체 - 컴포넌트(구독)\r\n*/\r\nimport Counter from '../components/Counter';\r\nimport * as actions from '../actions';    // 액션타입\r\nimport {connect} from 'react-redux';    // 스토어와 연결시킬 컴포넌트 지정\r\n\r\n// 13가지의 색깔\r\nexport function getRandomColor(){\r\n    const colors = [\r\n        '#495057','#f03e3e','#d6336c','#ae3ec9', '#7048e8',\r\n        '#4263eb','#1c7cd6','#1098ad', '#0ca678','#37b24d',\r\n        '#74b816','#f59f00','#f76707'\r\n    ];\r\n    const random = Math.floor(Math.random() * 13)\r\n\r\n    return colors[random];    // 선택된 인덱스 번호\r\n}\r\n\r\n// store 안에 state 값을 props로 연결해서 모든 컴포넌트가 구독할 수 있도록 연결 -> connect 함수\r\n// connect(1.state -> props로 전달함수명, 2. 액션을 리듀서에 연결시킬 함수명)(최종적으로 연결시킬 컴포넌트명)\r\nconst mapStateToProps = (state) => ({\r\n    color: state.color,     // 새로 변경시킬 색깔\r\n    number: state.number    // 변경시킬 숫자(증가 or 감소)\r\n})\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    // 전달받은 액션의 종류에 따라서 호출할 함수를 연결(dispatch)\r\n    onIncrement: () => dispatch(actions.increment()),\r\n    onDecrement: () => dispatch(actions.decrement()),\r\n    onSetColor:  () => {\r\n        const color = getRandomColor(); // 선택된 색깔\r\n        dispatch(actions.setColor(color))\r\n    }\r\n})\r\nconst CounterContainer = connect(mapStateToProps, mapDispatchToProps)(Counter);\r\n\r\nexport default CounterContainer;"]},"metadata":{},"sourceType":"module"}