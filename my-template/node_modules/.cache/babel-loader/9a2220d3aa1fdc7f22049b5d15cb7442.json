{"ast":null,"code":"var _jsxFileName = \"C:\\\\Dev\\\\git\\\\kic-react\\\\my-template\\\\src\\\\components\\\\App.js\";\nimport React from 'react'; //react.js(1)\n\nclass App extends React.Component {\n  // 속성초기화\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: 0 // this.setState(5)\n\n    };\n    this.setNewNumber = this.setNewNumber.bind(this);\n    console.log('constructor 호출됨!');\n  } // 증기\n\n\n  setNewNumber() {\n    if (this.state.data > 10) {\n      alert('더 이상 증가시킬 수 없음!');\n      return;\n    } else {\n      this.setState({\n        data: this.state.data + 1\n      });\n    }\n  } // 증기\n\n\n  setDownNumber() {\n    if (this.state.data < -10) {\n      alert('더 이상 감소시킬 수 없음!');\n      return;\n    } else {\n      this.setState({\n        data: this.state.data - 1\n      });\n    }\n  }\n\n  render() {\n    console.log('App의 render() 호출(화면 디자인 출력)');\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, this.state.data), React.createElement(\"button\", {\n      onClick: this.setNewNumber,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"\\uC99D\\uAC00\"), React.createElement(\"button\", {\n      onClick: this.setDownNumber.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, \"\\uAC10\\uC18C\"), React.createElement(Content, {\n      myNumber: this.state.data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }));\n  }\n\n} // 중첩(LifeCycle)\n\n\nclass Content extends React.Component {\n  // 1. 화면에 보여주는 부분\n  componentWillMount() {\n    // 화면에 보여주기 직전에 호출되는 부분\n    console.log('컴포넌트가 DOM과 연결되기 전에 호출(componentWillMount)');\n  }\n\n  componentDidMount() {\n    // 화면에 보여주기 직전에 호출되는 부분\n    console.log('컴포넌트가 DOM과 연결된 후에 호출(componentDidMount)');\n  }\n\n  render() {\n    console.log('Content 클래스의 화면에 보여주는 역할');\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, this.props.myNumber < -10 ? React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"\\uB354 \\uC774\\uC0C1 \\uAC10\\uC18C\\uC2DC\\uD0AC \\uC218 \\uC5C6\\uC74C!\") : this.props.myNumber < 10 ? React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, this.props.myNumber) : React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"\\uB354 \\uC774\\uC0C1 \\uC99D\\uAC00\\uC2DC\\uD0AC \\uC218 \\uC5C6\\uC74C!\"));\n  } // \n\n\n  shouldComponentUpdate(newProps, newState) {\n    // 내부적으로 값이 변경 -> 화면에 반영 -> render() 호출(like 새로고침)\n    console.log('return false이면 render() 호출 X');\n    return false; // default return값이 true\n    // return false로 지정하면 실제론 값이 변화되고 있으나 render를 호출하지 못해 출력이 안됨\n    // 새로고침의 키는 shouldComponentUpdate가 쥐고 있다고 보면 된다!\n  } // 화면에 보여준 뒤에 수정 전\n\n\n  componentWillUpdate() {\n    console.log(\"\\uC218\\uC815 \\uC804\\uC5D0(componentWillUpdate)\");\n  } // 화면에 보여준 뒤에 수정 후\n\n\n  componentDidUpdate() {\n    console.log(\"\\uC218\\uC815 \\uD6C4(componentDidUpdate)\");\n  } // 새로운 props 값을 받았을 때 호출\n\n\n  componentWillReceiveProps(newProps) {\n    console.log(\"newProps \\uAC12\\uC744 \\uBC1B\\uC558\\uC744 \\uB54C \\uD638\\uCD9C \".concat(newProps));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Dev/git/kic-react/my-template/src/components/App.js"],"names":["React","App","Component","constructor","props","state","data","setNewNumber","bind","console","log","alert","setState","setDownNumber","render","Content","componentWillMount","componentDidMount","myNumber","shouldComponentUpdate","newProps","newState","componentWillUpdate","componentDidUpdate","componentWillReceiveProps"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB,C,CAA0B;;AAE1B,MAAMC,GAAN,SAAkBD,KAAK,CAACE,SAAxB,CAAiC;AAC/B;AACAC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAC,CADM,CACH;;AADG,KAAb;AAGA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD,GAT8B,CAW/B;;;AACAH,EAAAA,YAAY,GAAE;AACZ,QAAG,KAAKF,KAAL,CAAWC,IAAX,GAAkB,EAArB,EAAwB;AACtBK,MAAAA,KAAK,CAAC,iBAAD,CAAL;AACA;AACD,KAHD,MAGK;AACH,WAAKC,QAAL,CAAc;AAACN,QAAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC,IAAX,GAAkB;AAAzB,OAAd;AACD;AACF,GAnB8B,CAqB/B;;;AACAO,EAAAA,aAAa,GAAE;AACb,QAAG,KAAKR,KAAL,CAAWC,IAAX,GAAkB,CAAC,EAAtB,EAAyB;AACvBK,MAAAA,KAAK,CAAC,iBAAD,CAAL;AACA;AACD,KAHD,MAGK;AACH,WAAKC,QAAL,CAAc;AAACN,QAAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC,IAAX,GAAkB;AAAzB,OAAd;AACD;AACF;;AAEDQ,EAAAA,MAAM,GAAE;AACNL,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACA,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKL,KAAL,CAAWC,IAAhB,CADD,EAEC;AAAQ,MAAA,OAAO,EAAE,KAAKC,YAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFD,EAGC;AAAQ,MAAA,OAAO,EAAE,KAAKM,aAAL,CAAmBL,IAAnB,CAAwB,IAAxB,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHD,EAIC,oBAAC,OAAD;AAAS,MAAA,QAAQ,EAAE,KAAKH,KAAL,CAAWC,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJD,CAAP;AAOD;;AAxC8B,C,CA2CjC;;;AACA,MAAMS,OAAN,SAAsBf,KAAK,CAACE,SAA5B,CAAqC;AACnC;AACAc,EAAAA,kBAAkB,GAAE;AAAE;AACpBP,IAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ;AACD;;AAEDO,EAAAA,iBAAiB,GAAE;AAAE;AACnBR,IAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACD;;AAEDI,EAAAA,MAAM,GAAE;AACNL,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKN,KAAL,CAAWc,QAAX,GAAsB,CAAC,EAAvB,GAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2EAA5B,GAC4B,KAAKd,KAAL,CAAWc,QAAX,GAAsB,EAAtB,GAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKd,KAAL,CAAWc,QAAhB,CAA3B,GAC2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2EAH1D,CADF;AAOD,GAnBkC,CAqBnC;;;AACAC,EAAAA,qBAAqB,CAACC,QAAD,EAAWC,QAAX,EAAoB;AACvC;AACAZ,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACA,WAAO,KAAP,CAHuC,CAGxB;AACA;AACA;AAChB,GA5BkC,CA8BnC;;;AACAY,EAAAA,mBAAmB,GAAE;AACnBb,IAAAA,OAAO,CAACC,GAAR;AACD,GAjCkC,CAmCnC;;;AACAa,EAAAA,kBAAkB,GAAE;AAClBd,IAAAA,OAAO,CAACC,GAAR;AACD,GAtCkC,CAwCnC;;;AACAc,EAAAA,yBAAyB,CAACJ,QAAD,EAAU;AACjCX,IAAAA,OAAO,CAACC,GAAR,wEAAoCU,QAApC;AACD;;AA3CkC;;AA8CrC,eAAenB,GAAf","sourcesContent":["\nimport React from 'react';//react.js(1)\n\nclass App extends React.Component{\n  // 속성초기화\n  constructor(props){\n    super(props)\n    this.state = {\n      data:0  // this.setState(5)\n    }\n    this.setNewNumber = this.setNewNumber.bind(this)\n    console.log('constructor 호출됨!')\n  }\n\n  // 증기\n  setNewNumber(){\n    if(this.state.data > 10){\n      alert('더 이상 증가시킬 수 없음!')\n      return;\n    }else{\n      this.setState({data: this.state.data + 1})\n    }\n  }\n\n  // 증기\n  setDownNumber(){\n    if(this.state.data < -10){\n      alert('더 이상 감소시킬 수 없음!')\n      return;\n    }else{\n      this.setState({data: this.state.data - 1})\n    }\n  }\n\n  render(){\n    console.log('App의 render() 호출(화면 디자인 출력)')\n    return(<div>\n            <h1>{this.state.data}</h1>\n            <button onClick={this.setNewNumber}>증가</button>\n            <button onClick={this.setDownNumber.bind(this)}>감소</button>\n            <Content myNumber={this.state.data} />\n           </div>\n          )\n  }\n}\n\n// 중첩(LifeCycle)\nclass Content extends React.Component{\n  // 1. 화면에 보여주는 부분\n  componentWillMount(){ // 화면에 보여주기 직전에 호출되는 부분\n    console.log('컴포넌트가 DOM과 연결되기 전에 호출(componentWillMount)')\n  }\n\n  componentDidMount(){ // 화면에 보여주기 직전에 호출되는 부분\n    console.log('컴포넌트가 DOM과 연결된 후에 호출(componentDidMount)')\n  }\n\n  render(){\n    console.log('Content 클래스의 화면에 보여주는 역할')\n    return(\n      <div>\n        {this.props.myNumber < -10 ? <h3>더 이상 감소시킬 수 없음!</h3>\n                                   : this.props.myNumber < 10 ? <h3>{this.props.myNumber}</h3>\n                                                              : <h3>더 이상 증가시킬 수 없음!</h3>}\n      </div>\n    )\n  }\n\n  // \n  shouldComponentUpdate(newProps, newState){\n    // 내부적으로 값이 변경 -> 화면에 반영 -> render() 호출(like 새로고침)\n    console.log('return false이면 render() 호출 X')\n    return false;  // default return값이 true\n                   // return false로 지정하면 실제론 값이 변화되고 있으나 render를 호출하지 못해 출력이 안됨\n                   // 새로고침의 키는 shouldComponentUpdate가 쥐고 있다고 보면 된다!\n  }\n\n  // 화면에 보여준 뒤에 수정 전\n  componentWillUpdate(){\n    console.log(`수정 전에(componentWillUpdate)`)\n  }\n  \n  // 화면에 보여준 뒤에 수정 후\n  componentDidUpdate(){\n    console.log(`수정 후(componentDidUpdate)`)\n  }\n\n  // 새로운 props 값을 받았을 때 호출\n  componentWillReceiveProps(newProps){\n    console.log(`newProps 값을 받았을 때 호출 ${newProps}`)\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}